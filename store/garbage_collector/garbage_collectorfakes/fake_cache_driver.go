// This file was generated by counterfeiter
package garbage_collectorfakes

import (
	"sync"

	"code.cloudfoundry.org/grootfs/store/garbage_collector"
	"code.cloudfoundry.org/lager"
)

type FakeCacheDriver struct {
	CleanStub        func(logger lager.Logger) error
	cleanMutex       sync.RWMutex
	cleanArgsForCall []struct {
		logger lager.Logger
	}
	cleanReturns struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeCacheDriver) Clean(logger lager.Logger) error {
	fake.cleanMutex.Lock()
	fake.cleanArgsForCall = append(fake.cleanArgsForCall, struct {
		logger lager.Logger
	}{logger})
	fake.recordInvocation("Clean", []interface{}{logger})
	fake.cleanMutex.Unlock()
	if fake.CleanStub != nil {
		return fake.CleanStub(logger)
	} else {
		return fake.cleanReturns.result1
	}
}

func (fake *FakeCacheDriver) CleanCallCount() int {
	fake.cleanMutex.RLock()
	defer fake.cleanMutex.RUnlock()
	return len(fake.cleanArgsForCall)
}

func (fake *FakeCacheDriver) CleanArgsForCall(i int) lager.Logger {
	fake.cleanMutex.RLock()
	defer fake.cleanMutex.RUnlock()
	return fake.cleanArgsForCall[i].logger
}

func (fake *FakeCacheDriver) CleanReturns(result1 error) {
	fake.CleanStub = nil
	fake.cleanReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCacheDriver) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.cleanMutex.RLock()
	defer fake.cleanMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeCacheDriver) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ garbage_collector.CacheDriver = new(FakeCacheDriver)
