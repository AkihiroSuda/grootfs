// This file was generated by counterfeiter
package grootfakes

import (
	"sync"

	"code.cloudfoundry.org/grootfs/groot"
	"code.cloudfoundry.org/lager"
)

type FakeCleaner struct {
	CleanStub        func(logger lager.Logger, threshold int64, keepImages []string) (bool, error)
	cleanMutex       sync.RWMutex
	cleanArgsForCall []struct {
		logger     lager.Logger
		threshold  int64
		keepImages []string
	}
	cleanReturns struct {
		result1 bool
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeCleaner) Clean(logger lager.Logger, threshold int64, keepImages []string) (bool, error) {
	var keepImagesCopy []string
	if keepImages != nil {
		keepImagesCopy = make([]string, len(keepImages))
		copy(keepImagesCopy, keepImages)
	}
	fake.cleanMutex.Lock()
	fake.cleanArgsForCall = append(fake.cleanArgsForCall, struct {
		logger     lager.Logger
		threshold  int64
		keepImages []string
	}{logger, threshold, keepImagesCopy})
	fake.recordInvocation("Clean", []interface{}{logger, threshold, keepImagesCopy})
	fake.cleanMutex.Unlock()
	if fake.CleanStub != nil {
		return fake.CleanStub(logger, threshold, keepImages)
	} else {
		return fake.cleanReturns.result1, fake.cleanReturns.result2
	}
}

func (fake *FakeCleaner) CleanCallCount() int {
	fake.cleanMutex.RLock()
	defer fake.cleanMutex.RUnlock()
	return len(fake.cleanArgsForCall)
}

func (fake *FakeCleaner) CleanArgsForCall(i int) (lager.Logger, int64, []string) {
	fake.cleanMutex.RLock()
	defer fake.cleanMutex.RUnlock()
	return fake.cleanArgsForCall[i].logger, fake.cleanArgsForCall[i].threshold, fake.cleanArgsForCall[i].keepImages
}

func (fake *FakeCleaner) CleanReturns(result1 bool, result2 error) {
	fake.CleanStub = nil
	fake.cleanReturns = struct {
		result1 bool
		result2 error
	}{result1, result2}
}

func (fake *FakeCleaner) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.cleanMutex.RLock()
	defer fake.cleanMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeCleaner) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ groot.Cleaner = new(FakeCleaner)
