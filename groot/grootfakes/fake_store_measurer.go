// This file was generated by counterfeiter
package grootfakes

import (
	"sync"

	"code.cloudfoundry.org/grootfs/groot"
	"code.cloudfoundry.org/lager"
)

type FakeStoreMeasurer struct {
	MeasureStoreStub        func(logger lager.Logger) (int64, error)
	measureStoreMutex       sync.RWMutex
	measureStoreArgsForCall []struct {
		logger lager.Logger
	}
	measureStoreReturns struct {
		result1 int64
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeStoreMeasurer) MeasureStore(logger lager.Logger) (int64, error) {
	fake.measureStoreMutex.Lock()
	fake.measureStoreArgsForCall = append(fake.measureStoreArgsForCall, struct {
		logger lager.Logger
	}{logger})
	fake.recordInvocation("MeasureStore", []interface{}{logger})
	fake.measureStoreMutex.Unlock()
	if fake.MeasureStoreStub != nil {
		return fake.MeasureStoreStub(logger)
	} else {
		return fake.measureStoreReturns.result1, fake.measureStoreReturns.result2
	}
}

func (fake *FakeStoreMeasurer) MeasureStoreCallCount() int {
	fake.measureStoreMutex.RLock()
	defer fake.measureStoreMutex.RUnlock()
	return len(fake.measureStoreArgsForCall)
}

func (fake *FakeStoreMeasurer) MeasureStoreArgsForCall(i int) lager.Logger {
	fake.measureStoreMutex.RLock()
	defer fake.measureStoreMutex.RUnlock()
	return fake.measureStoreArgsForCall[i].logger
}

func (fake *FakeStoreMeasurer) MeasureStoreReturns(result1 int64, result2 error) {
	fake.MeasureStoreStub = nil
	fake.measureStoreReturns = struct {
		result1 int64
		result2 error
	}{result1, result2}
}

func (fake *FakeStoreMeasurer) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.measureStoreMutex.RLock()
	defer fake.measureStoreMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeStoreMeasurer) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ groot.StoreMeasurer = new(FakeStoreMeasurer)
