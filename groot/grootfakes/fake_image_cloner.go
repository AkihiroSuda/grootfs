// This file was generated by counterfeiter
package grootfakes

import (
	"sync"

	"code.cloudfoundry.org/grootfs/groot"
	"code.cloudfoundry.org/lager"
)

type FakeImageCloner struct {
	ExistsStub        func(id string) (bool, error)
	existsMutex       sync.RWMutex
	existsArgsForCall []struct {
		id string
	}
	existsReturns struct {
		result1 bool
		result2 error
	}
	CreateStub        func(logger lager.Logger, spec groot.ImageSpec) (groot.Image, error)
	createMutex       sync.RWMutex
	createArgsForCall []struct {
		logger lager.Logger
		spec   groot.ImageSpec
	}
	createReturns struct {
		result1 groot.Image
		result2 error
	}
	DestroyStub        func(logger lager.Logger, id string) error
	destroyMutex       sync.RWMutex
	destroyArgsForCall []struct {
		logger lager.Logger
		id     string
	}
	destroyReturns struct {
		result1 error
	}
	StatsStub        func(logger lager.Logger, id string) (groot.VolumeStats, error)
	statsMutex       sync.RWMutex
	statsArgsForCall []struct {
		logger lager.Logger
		id     string
	}
	statsReturns struct {
		result1 groot.VolumeStats
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeImageCloner) Exists(id string) (bool, error) {
	fake.existsMutex.Lock()
	fake.existsArgsForCall = append(fake.existsArgsForCall, struct {
		id string
	}{id})
	fake.recordInvocation("Exists", []interface{}{id})
	fake.existsMutex.Unlock()
	if fake.ExistsStub != nil {
		return fake.ExistsStub(id)
	} else {
		return fake.existsReturns.result1, fake.existsReturns.result2
	}
}

func (fake *FakeImageCloner) ExistsCallCount() int {
	fake.existsMutex.RLock()
	defer fake.existsMutex.RUnlock()
	return len(fake.existsArgsForCall)
}

func (fake *FakeImageCloner) ExistsArgsForCall(i int) string {
	fake.existsMutex.RLock()
	defer fake.existsMutex.RUnlock()
	return fake.existsArgsForCall[i].id
}

func (fake *FakeImageCloner) ExistsReturns(result1 bool, result2 error) {
	fake.ExistsStub = nil
	fake.existsReturns = struct {
		result1 bool
		result2 error
	}{result1, result2}
}

func (fake *FakeImageCloner) Create(logger lager.Logger, spec groot.ImageSpec) (groot.Image, error) {
	fake.createMutex.Lock()
	fake.createArgsForCall = append(fake.createArgsForCall, struct {
		logger lager.Logger
		spec   groot.ImageSpec
	}{logger, spec})
	fake.recordInvocation("Create", []interface{}{logger, spec})
	fake.createMutex.Unlock()
	if fake.CreateStub != nil {
		return fake.CreateStub(logger, spec)
	} else {
		return fake.createReturns.result1, fake.createReturns.result2
	}
}

func (fake *FakeImageCloner) CreateCallCount() int {
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	return len(fake.createArgsForCall)
}

func (fake *FakeImageCloner) CreateArgsForCall(i int) (lager.Logger, groot.ImageSpec) {
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	return fake.createArgsForCall[i].logger, fake.createArgsForCall[i].spec
}

func (fake *FakeImageCloner) CreateReturns(result1 groot.Image, result2 error) {
	fake.CreateStub = nil
	fake.createReturns = struct {
		result1 groot.Image
		result2 error
	}{result1, result2}
}

func (fake *FakeImageCloner) Destroy(logger lager.Logger, id string) error {
	fake.destroyMutex.Lock()
	fake.destroyArgsForCall = append(fake.destroyArgsForCall, struct {
		logger lager.Logger
		id     string
	}{logger, id})
	fake.recordInvocation("Destroy", []interface{}{logger, id})
	fake.destroyMutex.Unlock()
	if fake.DestroyStub != nil {
		return fake.DestroyStub(logger, id)
	} else {
		return fake.destroyReturns.result1
	}
}

func (fake *FakeImageCloner) DestroyCallCount() int {
	fake.destroyMutex.RLock()
	defer fake.destroyMutex.RUnlock()
	return len(fake.destroyArgsForCall)
}

func (fake *FakeImageCloner) DestroyArgsForCall(i int) (lager.Logger, string) {
	fake.destroyMutex.RLock()
	defer fake.destroyMutex.RUnlock()
	return fake.destroyArgsForCall[i].logger, fake.destroyArgsForCall[i].id
}

func (fake *FakeImageCloner) DestroyReturns(result1 error) {
	fake.DestroyStub = nil
	fake.destroyReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeImageCloner) Stats(logger lager.Logger, id string) (groot.VolumeStats, error) {
	fake.statsMutex.Lock()
	fake.statsArgsForCall = append(fake.statsArgsForCall, struct {
		logger lager.Logger
		id     string
	}{logger, id})
	fake.recordInvocation("Stats", []interface{}{logger, id})
	fake.statsMutex.Unlock()
	if fake.StatsStub != nil {
		return fake.StatsStub(logger, id)
	} else {
		return fake.statsReturns.result1, fake.statsReturns.result2
	}
}

func (fake *FakeImageCloner) StatsCallCount() int {
	fake.statsMutex.RLock()
	defer fake.statsMutex.RUnlock()
	return len(fake.statsArgsForCall)
}

func (fake *FakeImageCloner) StatsArgsForCall(i int) (lager.Logger, string) {
	fake.statsMutex.RLock()
	defer fake.statsMutex.RUnlock()
	return fake.statsArgsForCall[i].logger, fake.statsArgsForCall[i].id
}

func (fake *FakeImageCloner) StatsReturns(result1 groot.VolumeStats, result2 error) {
	fake.StatsStub = nil
	fake.statsReturns = struct {
		result1 groot.VolumeStats
		result2 error
	}{result1, result2}
}

func (fake *FakeImageCloner) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.existsMutex.RLock()
	defer fake.existsMutex.RUnlock()
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	fake.destroyMutex.RLock()
	defer fake.destroyMutex.RUnlock()
	fake.statsMutex.RLock()
	defer fake.statsMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeImageCloner) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ groot.ImageCloner = new(FakeImageCloner)
