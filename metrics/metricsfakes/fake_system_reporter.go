// Code generated by counterfeiter. DO NOT EDIT.
package metricsfakes

import (
	"sync"
	"time"

	"code.cloudfoundry.org/grootfs/metrics"
	"code.cloudfoundry.org/lager"
)

type FakeSystemReporter struct {
	ReportStub        func(lager.Logger, time.Duration)
	reportMutex       sync.RWMutex
	reportArgsForCall []struct {
		arg1 lager.Logger
		arg2 time.Duration
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeSystemReporter) Report(arg1 lager.Logger, arg2 time.Duration) {
	fake.reportMutex.Lock()
	fake.reportArgsForCall = append(fake.reportArgsForCall, struct {
		arg1 lager.Logger
		arg2 time.Duration
	}{arg1, arg2})
	fake.recordInvocation("Report", []interface{}{arg1, arg2})
	fake.reportMutex.Unlock()
	if fake.ReportStub != nil {
		fake.ReportStub(arg1, arg2)
	}
}

func (fake *FakeSystemReporter) ReportCallCount() int {
	fake.reportMutex.RLock()
	defer fake.reportMutex.RUnlock()
	return len(fake.reportArgsForCall)
}

func (fake *FakeSystemReporter) ReportArgsForCall(i int) (lager.Logger, time.Duration) {
	fake.reportMutex.RLock()
	defer fake.reportMutex.RUnlock()
	return fake.reportArgsForCall[i].arg1, fake.reportArgsForCall[i].arg2
}

func (fake *FakeSystemReporter) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.reportMutex.RLock()
	defer fake.reportMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeSystemReporter) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ metrics.SystemReporter = new(FakeSystemReporter)
