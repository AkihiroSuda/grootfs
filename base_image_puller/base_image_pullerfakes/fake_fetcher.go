// This file was generated by counterfeiter
package base_image_pullerfakes

import (
	"io"
	"net/url"
	"sync"

	"code.cloudfoundry.org/grootfs/base_image_puller"
	"code.cloudfoundry.org/lager"
)

type FakeFetcher struct {
	BaseImageInfoStub        func(logger lager.Logger, baseImageURL *url.URL) (base_image_puller.BaseImageInfo, error)
	baseImageInfoMutex       sync.RWMutex
	baseImageInfoArgsForCall []struct {
		logger       lager.Logger
		baseImageURL *url.URL
	}
	baseImageInfoReturns struct {
		result1 base_image_puller.BaseImageInfo
		result2 error
	}
	StreamBlobStub        func(logger lager.Logger, baseImageURL *url.URL, source string) (io.ReadCloser, int64, error)
	streamBlobMutex       sync.RWMutex
	streamBlobArgsForCall []struct {
		logger       lager.Logger
		baseImageURL *url.URL
		source       string
	}
	streamBlobReturns struct {
		result1 io.ReadCloser
		result2 int64
		result3 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeFetcher) BaseImageInfo(logger lager.Logger, baseImageURL *url.URL) (base_image_puller.BaseImageInfo, error) {
	fake.baseImageInfoMutex.Lock()
	fake.baseImageInfoArgsForCall = append(fake.baseImageInfoArgsForCall, struct {
		logger       lager.Logger
		baseImageURL *url.URL
	}{logger, baseImageURL})
	fake.recordInvocation("BaseImageInfo", []interface{}{logger, baseImageURL})
	fake.baseImageInfoMutex.Unlock()
	if fake.BaseImageInfoStub != nil {
		return fake.BaseImageInfoStub(logger, baseImageURL)
	} else {
		return fake.baseImageInfoReturns.result1, fake.baseImageInfoReturns.result2
	}
}

func (fake *FakeFetcher) BaseImageInfoCallCount() int {
	fake.baseImageInfoMutex.RLock()
	defer fake.baseImageInfoMutex.RUnlock()
	return len(fake.baseImageInfoArgsForCall)
}

func (fake *FakeFetcher) BaseImageInfoArgsForCall(i int) (lager.Logger, *url.URL) {
	fake.baseImageInfoMutex.RLock()
	defer fake.baseImageInfoMutex.RUnlock()
	return fake.baseImageInfoArgsForCall[i].logger, fake.baseImageInfoArgsForCall[i].baseImageURL
}

func (fake *FakeFetcher) BaseImageInfoReturns(result1 base_image_puller.BaseImageInfo, result2 error) {
	fake.BaseImageInfoStub = nil
	fake.baseImageInfoReturns = struct {
		result1 base_image_puller.BaseImageInfo
		result2 error
	}{result1, result2}
}

func (fake *FakeFetcher) StreamBlob(logger lager.Logger, baseImageURL *url.URL, source string) (io.ReadCloser, int64, error) {
	fake.streamBlobMutex.Lock()
	fake.streamBlobArgsForCall = append(fake.streamBlobArgsForCall, struct {
		logger       lager.Logger
		baseImageURL *url.URL
		source       string
	}{logger, baseImageURL, source})
	fake.recordInvocation("StreamBlob", []interface{}{logger, baseImageURL, source})
	fake.streamBlobMutex.Unlock()
	if fake.StreamBlobStub != nil {
		return fake.StreamBlobStub(logger, baseImageURL, source)
	} else {
		return fake.streamBlobReturns.result1, fake.streamBlobReturns.result2, fake.streamBlobReturns.result3
	}
}

func (fake *FakeFetcher) StreamBlobCallCount() int {
	fake.streamBlobMutex.RLock()
	defer fake.streamBlobMutex.RUnlock()
	return len(fake.streamBlobArgsForCall)
}

func (fake *FakeFetcher) StreamBlobArgsForCall(i int) (lager.Logger, *url.URL, string) {
	fake.streamBlobMutex.RLock()
	defer fake.streamBlobMutex.RUnlock()
	return fake.streamBlobArgsForCall[i].logger, fake.streamBlobArgsForCall[i].baseImageURL, fake.streamBlobArgsForCall[i].source
}

func (fake *FakeFetcher) StreamBlobReturns(result1 io.ReadCloser, result2 int64, result3 error) {
	fake.StreamBlobStub = nil
	fake.streamBlobReturns = struct {
		result1 io.ReadCloser
		result2 int64
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeFetcher) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.baseImageInfoMutex.RLock()
	defer fake.baseImageInfoMutex.RUnlock()
	fake.streamBlobMutex.RLock()
	defer fake.streamBlobMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeFetcher) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ base_image_puller.Fetcher = new(FakeFetcher)
