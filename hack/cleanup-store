#!/bin/bash -e

RED=1
GREEN=2
print_message() {
  message=$1
  colour=$2
  printf "\r\033[00;3${colour}m[${message}]\033[0m\n"
}

get_btrfs_mountpoint() {
  store_path=$1

  mount_path=$store_path
  while [ "$mount_path" != "/" ]; do
    sudo btrfs filesystem show $mount_path &> /dev/null
    [ $? -eq 0 ] && break

    mount_path=$(cd $mount_path/..; pwd)
  done

  if [ "$mount_path" == "/" ]; then
    print_message "'$store_path' does not belong to a BTRFS mount" $RED
    exit 1
  fi

  echo $mount_path
}

relpath() {
  path=$1
  start=$2

  python -c "import os.path; print os.path.relpath('$path', '$start')"
}

remove_subvolumes() {
  store_path=$1

  mount_path=$(get_btrfs_mountpoint $store_path)
  relpath=$(relpath $store_path $mount_path)
  volumes=($(sudo btrfs subvolume list $mount_path | grep $relpath | cut -d ' ' -f 9))
  print_message "Will clean "${#volumes[@]}" volumes" $GREEN

  for volume in ${volumes[@]}; do
    btrfs subvolume delete $mount_path/$volume
  done
}

cleanup_store() {
  store_path=$1

  remove_subvolumes $store_path
  rm -Rf $store_path/**/images/*
  rm -Rf $store_path/**/locks/*
}

store_path=${1:-"/var/lib/grootfs"}
store_path=$(cd $store_path; pwd)  # absolute path
cleanup_store $store_path
