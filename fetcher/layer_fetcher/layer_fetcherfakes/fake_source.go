// This file was generated by counterfeiter
package layer_fetcherfakes

import (
	"net/url"
	"sync"

	"code.cloudfoundry.org/grootfs/fetcher/layer_fetcher"
	"code.cloudfoundry.org/lager"
	"github.com/containers/image/types"
)

type FakeSource struct {
	ManifestStub        func(logger lager.Logger, baseImageURL *url.URL) (types.Image, error)
	manifestMutex       sync.RWMutex
	manifestArgsForCall []struct {
		logger       lager.Logger
		baseImageURL *url.URL
	}
	manifestReturns struct {
		result1 types.Image
		result2 error
	}
	BlobStub        func(logger lager.Logger, baseImageURL *url.URL, digest string) (string, int64, error)
	blobMutex       sync.RWMutex
	blobArgsForCall []struct {
		logger       lager.Logger
		baseImageURL *url.URL
		digest       string
	}
	blobReturns struct {
		result1 string
		result2 int64
		result3 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeSource) Manifest(logger lager.Logger, baseImageURL *url.URL) (types.Image, error) {
	fake.manifestMutex.Lock()
	fake.manifestArgsForCall = append(fake.manifestArgsForCall, struct {
		logger       lager.Logger
		baseImageURL *url.URL
	}{logger, baseImageURL})
	fake.recordInvocation("Manifest", []interface{}{logger, baseImageURL})
	fake.manifestMutex.Unlock()
	if fake.ManifestStub != nil {
		return fake.ManifestStub(logger, baseImageURL)
	} else {
		return fake.manifestReturns.result1, fake.manifestReturns.result2
	}
}

func (fake *FakeSource) ManifestCallCount() int {
	fake.manifestMutex.RLock()
	defer fake.manifestMutex.RUnlock()
	return len(fake.manifestArgsForCall)
}

func (fake *FakeSource) ManifestArgsForCall(i int) (lager.Logger, *url.URL) {
	fake.manifestMutex.RLock()
	defer fake.manifestMutex.RUnlock()
	return fake.manifestArgsForCall[i].logger, fake.manifestArgsForCall[i].baseImageURL
}

func (fake *FakeSource) ManifestReturns(result1 types.Image, result2 error) {
	fake.ManifestStub = nil
	fake.manifestReturns = struct {
		result1 types.Image
		result2 error
	}{result1, result2}
}

func (fake *FakeSource) Blob(logger lager.Logger, baseImageURL *url.URL, digest string) (string, int64, error) {
	fake.blobMutex.Lock()
	fake.blobArgsForCall = append(fake.blobArgsForCall, struct {
		logger       lager.Logger
		baseImageURL *url.URL
		digest       string
	}{logger, baseImageURL, digest})
	fake.recordInvocation("Blob", []interface{}{logger, baseImageURL, digest})
	fake.blobMutex.Unlock()
	if fake.BlobStub != nil {
		return fake.BlobStub(logger, baseImageURL, digest)
	} else {
		return fake.blobReturns.result1, fake.blobReturns.result2, fake.blobReturns.result3
	}
}

func (fake *FakeSource) BlobCallCount() int {
	fake.blobMutex.RLock()
	defer fake.blobMutex.RUnlock()
	return len(fake.blobArgsForCall)
}

func (fake *FakeSource) BlobArgsForCall(i int) (lager.Logger, *url.URL, string) {
	fake.blobMutex.RLock()
	defer fake.blobMutex.RUnlock()
	return fake.blobArgsForCall[i].logger, fake.blobArgsForCall[i].baseImageURL, fake.blobArgsForCall[i].digest
}

func (fake *FakeSource) BlobReturns(result1 string, result2 int64, result3 error) {
	fake.BlobStub = nil
	fake.blobReturns = struct {
		result1 string
		result2 int64
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeSource) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.manifestMutex.RLock()
	defer fake.manifestMutex.RUnlock()
	fake.blobMutex.RLock()
	defer fake.blobMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeSource) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ layer_fetcher.Source = new(FakeSource)
