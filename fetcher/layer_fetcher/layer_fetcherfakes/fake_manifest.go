// This file was generated by counterfeiter
package layer_fetcherfakes

import (
	"sync"

	"code.cloudfoundry.org/grootfs/fetcher/layer_fetcher"
	"github.com/containers/image/types"
	specsv1 "github.com/opencontainers/image-spec/specs-go/v1"
)

type FakeManifest struct {
	OCIConfigStub        func() (specsv1.Image, error)
	oCIConfigMutex       sync.RWMutex
	oCIConfigArgsForCall []struct{}
	oCIConfigReturns     struct {
		result1 specsv1.Image
		result2 error
	}
	LayerInfosStub        func() []types.BlobInfo
	layerInfosMutex       sync.RWMutex
	layerInfosArgsForCall []struct{}
	layerInfosReturns     struct {
		result1 []types.BlobInfo
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeManifest) OCIConfig() (specsv1.Image, error) {
	fake.oCIConfigMutex.Lock()
	fake.oCIConfigArgsForCall = append(fake.oCIConfigArgsForCall, struct{}{})
	fake.recordInvocation("OCIConfig", []interface{}{})
	fake.oCIConfigMutex.Unlock()
	if fake.OCIConfigStub != nil {
		return fake.OCIConfigStub()
	} else {
		return fake.oCIConfigReturns.result1, fake.oCIConfigReturns.result2
	}
}

func (fake *FakeManifest) OCIConfigCallCount() int {
	fake.oCIConfigMutex.RLock()
	defer fake.oCIConfigMutex.RUnlock()
	return len(fake.oCIConfigArgsForCall)
}

func (fake *FakeManifest) OCIConfigReturns(result1 specsv1.Image, result2 error) {
	fake.OCIConfigStub = nil
	fake.oCIConfigReturns = struct {
		result1 specsv1.Image
		result2 error
	}{result1, result2}
}

func (fake *FakeManifest) LayerInfos() []types.BlobInfo {
	fake.layerInfosMutex.Lock()
	fake.layerInfosArgsForCall = append(fake.layerInfosArgsForCall, struct{}{})
	fake.recordInvocation("LayerInfos", []interface{}{})
	fake.layerInfosMutex.Unlock()
	if fake.LayerInfosStub != nil {
		return fake.LayerInfosStub()
	} else {
		return fake.layerInfosReturns.result1
	}
}

func (fake *FakeManifest) LayerInfosCallCount() int {
	fake.layerInfosMutex.RLock()
	defer fake.layerInfosMutex.RUnlock()
	return len(fake.layerInfosArgsForCall)
}

func (fake *FakeManifest) LayerInfosReturns(result1 []types.BlobInfo) {
	fake.LayerInfosStub = nil
	fake.layerInfosReturns = struct {
		result1 []types.BlobInfo
	}{result1}
}

func (fake *FakeManifest) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.oCIConfigMutex.RLock()
	defer fake.oCIConfigMutex.RUnlock()
	fake.layerInfosMutex.RLock()
	defer fake.layerInfosMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeManifest) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ layer_fetcher.Manifest = new(FakeManifest)
